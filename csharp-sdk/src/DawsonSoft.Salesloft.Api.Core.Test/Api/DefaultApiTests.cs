/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using DawsonSoft.Salesloft.Api.Core.Client;
using DawsonSoft.Salesloft.Api.Core.Api;
// uncomment below to import models
//using DawsonSoft.Salesloft.Api.Core.Model;

namespace DawsonSoft.Salesloft.Api.Core.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test AccountGet
        /// </summary>
        [Fact]
        public void AccountGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.AccountGet(id);
            //Assert.IsType<AccountGetResponse>(response);
        }

        /// <summary>
        /// Test AccountsList
        /// </summary>
        [Fact]
        public void AccountsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.AccountsList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<AccountsListResponse>(response);
        }

        /// <summary>
        /// Test ActivityHistoriesList
        /// </summary>
        [Fact]
        public void ActivityHistoriesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? occurredAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.ActivityHistoriesList(ids, updatedAt, occurredAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<ActivityHistoriesListResponse>(response);
        }

        /// <summary>
        /// Test CadenceExport
        /// </summary>
        [Fact]
        public void CadenceExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.CadenceExport(id);
            //Assert.IsType<CadenceExportResponse>(response);
        }

        /// <summary>
        /// Test CadenceGet
        /// </summary>
        [Fact]
        public void CadenceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.CadenceGet(id);
            //Assert.IsType<CadenceGetResponse>(response);
        }

        /// <summary>
        /// Test CadencesList
        /// </summary>
        [Fact]
        public void CadencesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.CadencesList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<CadencesListResponse>(response);
        }

        /// <summary>
        /// Test GroupsList
        /// </summary>
        [Fact]
        public void GroupsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.GroupsList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<GroupsListResponse>(response);
        }

        /// <summary>
        /// Test NotesList
        /// </summary>
        [Fact]
        public void NotesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.NotesList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<NotesListResponse>(response);
        }

        /// <summary>
        /// Test PeopleUpdate
        /// </summary>
        [Fact]
        public void PeopleUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //PersonCreateRequest personCreateRequest = null;
            //var response = instance.PeopleUpdate(id, personCreateRequest);
            //Assert.IsType<PeoplePutResponse>(response);
        }

        /// <summary>
        /// Test PersonCreate
        /// </summary>
        [Fact]
        public void PersonCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PersonCreateRequest personCreateRequest = null;
            //var response = instance.PersonCreate(personCreateRequest);
            //Assert.IsType<PeoplePostResponse>(response);
        }

        /// <summary>
        /// Test PersonGet
        /// </summary>
        [Fact]
        public void PersonGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.PersonGet(id);
            //Assert.IsType<PeopleGetResponse>(response);
        }

        /// <summary>
        /// Test PersonList
        /// </summary>
        [Fact]
        public void PersonListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.PersonList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<PeopleListResponse>(response);
        }

        /// <summary>
        /// Test TagsList
        /// </summary>
        [Fact]
        public void TagsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.TagsList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<TagsListResponse>(response);
        }

        /// <summary>
        /// Test TeamTemplatesGet
        /// </summary>
        [Fact]
        public void TeamTemplatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.TeamTemplatesGet(id);
            //Assert.IsType<TeamTemplatesGetResponse>(response);
        }

        /// <summary>
        /// Test TeamTemplatesList
        /// </summary>
        [Fact]
        public void TeamTemplatesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.TeamTemplatesList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<TeamTemplatesListResponse>(response);
        }

        /// <summary>
        /// Test UserMe
        /// </summary>
        [Fact]
        public void UserMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserMe();
            //Assert.IsType<UserMeResponse>(response);
        }

        /// <summary>
        /// Test UsersList
        /// </summary>
        [Fact]
        public void UsersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? ids = null;
            //string? updatedAt = null;
            //string? createdAt = null;
            //string? sortBy = null;
            //string? sortDirection = null;
            //string? perPage = null;
            //string? page = null;
            //string? includePagingCounts = null;
            //string? limitPagingCounts = null;
            //var response = instance.UsersList(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            //Assert.IsType<UsersListResponse>(response);
        }
    }
}

/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DawsonSoft.Salesloft.Api.Core.Client;
using DawsonSoft.Salesloft.Api.Core.Model;

namespace DawsonSoft.Salesloft.Api.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches an account, by ID only.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        AccountGetResponse AccountGet(int? id, int operationIndex = 0);

        /// <summary>
        /// Fetches an account, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        ApiResponse<AccountGetResponse> AccountGetWithHttpInfo(int? id, int operationIndex = 0);
        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsListResponse</returns>
        AccountsListResponse AccountsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsListResponse</returns>
        ApiResponse<AccountsListResponse> AccountsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivityHistoriesListResponse</returns>
        ActivityHistoriesListResponse ActivityHistoriesList(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivityHistoriesListResponse</returns>
        ApiResponse<ActivityHistoriesListResponse> ActivityHistoriesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Exports a cadence as JSON.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadenceExportResponse</returns>
        CadenceExportResponse CadenceExport(int? id, int operationIndex = 0);

        /// <summary>
        /// Exports a cadence as JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadenceExportResponse</returns>
        ApiResponse<CadenceExportResponse> CadenceExportWithHttpInfo(int? id, int operationIndex = 0);
        /// <summary>
        /// Fetch a cadence
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadenceGetResponse</returns>
        CadenceGetResponse CadenceGet(int? id, int operationIndex = 0);

        /// <summary>
        /// Fetch a cadence
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadenceGetResponse</returns>
        ApiResponse<CadenceGetResponse> CadenceGetWithHttpInfo(int? id, int operationIndex = 0);
        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadencesListResponse</returns>
        CadencesListResponse CadencesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadencesListResponse</returns>
        ApiResponse<CadencesListResponse> CadencesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Fetches multiple group records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsListResponse</returns>
        GroupsListResponse GroupsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches multiple group records. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsListResponse</returns>
        ApiResponse<GroupsListResponse> GroupsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Fetches multiple note records.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotesListResponse</returns>
        NotesListResponse NotesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches multiple note records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotesListResponse</returns>
        ApiResponse<NotesListResponse> NotesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a person
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeoplePutResponse</returns>
        PeoplePutResponse PeopleUpdate(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Update a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeoplePutResponse</returns>
        ApiResponse<PeoplePutResponse> PeopleUpdateWithHttpInfo(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeoplePostResponse</returns>
        PeoplePostResponse PersonCreate(PersonCreateRequest personCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeoplePostResponse</returns>
        ApiResponse<PeoplePostResponse> PersonCreateWithHttpInfo(PersonCreateRequest personCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Fetches a person, by ID only.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleGetResponse</returns>
        PeopleGetResponse PersonGet(int? id, int operationIndex = 0);

        /// <summary>
        /// Fetches a person, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleGetResponse</returns>
        ApiResponse<PeopleGetResponse> PersonGetWithHttpInfo(int? id, int operationIndex = 0);
        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleListResponse</returns>
        PeopleListResponse PersonList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleListResponse</returns>
        ApiResponse<PeopleListResponse> PersonListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Fetches a list of the tags used for a team.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagsListResponse</returns>
        TagsListResponse TagsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Fetches a list of the tags used for a team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagsListResponse</returns>
        ApiResponse<TagsListResponse> TagsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Fetches a team template, by ID only.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamTemplatesGetResponse</returns>
        TeamTemplatesGetResponse TeamTemplatesGet(int? id, int operationIndex = 0);

        /// <summary>
        /// Fetches a team template, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamTemplatesGetResponse</returns>
        ApiResponse<TeamTemplatesGetResponse> TeamTemplatesGetWithHttpInfo(int? id, int operationIndex = 0);
        /// <summary>
        /// etches multiple team template records.
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamTemplatesListResponse</returns>
        TeamTemplatesListResponse TeamTemplatesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// etches multiple team template records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamTemplatesListResponse</returns>
        ApiResponse<TeamTemplatesListResponse> TeamTemplatesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        /// <summary>
        /// Fetch current user
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserMeResponse</returns>
        UserMeResponse UserMe(int operationIndex = 0);

        /// <summary>
        /// Fetch current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserMeResponse</returns>
        ApiResponse<UserMeResponse> UserMeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsersListResponse</returns>
        UsersListResponse UsersList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsersListResponse</returns>
        ApiResponse<UsersListResponse> UsersListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetches an account, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        System.Threading.Tasks.Task<AccountGetResponse> AccountGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches an account, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountGetResponse>> AccountGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsListResponse</returns>
        System.Threading.Tasks.Task<AccountsListResponse> AccountsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsListResponse>> AccountsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivityHistoriesListResponse</returns>
        System.Threading.Tasks.Task<ActivityHistoriesListResponse> ActivityHistoriesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivityHistoriesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityHistoriesListResponse>> ActivityHistoriesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Exports a cadence as JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadenceExportResponse</returns>
        System.Threading.Tasks.Task<CadenceExportResponse> CadenceExportAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Exports a cadence as JSON.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadenceExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CadenceExportResponse>> CadenceExportWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a cadence
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadenceGetResponse</returns>
        System.Threading.Tasks.Task<CadenceGetResponse> CadenceGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a cadence
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadenceGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CadenceGetResponse>> CadenceGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadencesListResponse</returns>
        System.Threading.Tasks.Task<CadencesListResponse> CadencesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadencesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CadencesListResponse>> CadencesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches multiple group records. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsListResponse</returns>
        System.Threading.Tasks.Task<GroupsListResponse> GroupsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches multiple group records. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupsListResponse>> GroupsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches multiple note records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotesListResponse</returns>
        System.Threading.Tasks.Task<NotesListResponse> NotesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches multiple note records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotesListResponse>> NotesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeoplePutResponse</returns>
        System.Threading.Tasks.Task<PeoplePutResponse> PeopleUpdateAsync(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a person
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeoplePutResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeoplePutResponse>> PeopleUpdateWithHttpInfoAsync(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeoplePostResponse</returns>
        System.Threading.Tasks.Task<PeoplePostResponse> PersonCreateAsync(PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeoplePostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeoplePostResponse>> PersonCreateWithHttpInfoAsync(PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a person, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleGetResponse</returns>
        System.Threading.Tasks.Task<PeopleGetResponse> PersonGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a person, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleGetResponse>> PersonGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleListResponse</returns>
        System.Threading.Tasks.Task<PeopleListResponse> PersonListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeopleListResponse>> PersonListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a list of the tags used for a team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagsListResponse</returns>
        System.Threading.Tasks.Task<TagsListResponse> TagsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a list of the tags used for a team.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagsListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagsListResponse>> TagsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a team template, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamTemplatesGetResponse</returns>
        System.Threading.Tasks.Task<TeamTemplatesGetResponse> TeamTemplatesGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a team template, by ID only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamTemplatesGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplatesGetResponse>> TeamTemplatesGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// etches multiple team template records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamTemplatesListResponse</returns>
        System.Threading.Tasks.Task<TeamTemplatesListResponse> TeamTemplatesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// etches multiple team template records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamTemplatesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamTemplatesListResponse>> TeamTemplatesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Fetch current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserMeResponse</returns>
        System.Threading.Tasks.Task<UserMeResponse> UserMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Fetch current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserMeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserMeResponse>> UserMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsersListResponse</returns>
        System.Threading.Tasks.Task<UsersListResponse> UsersListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsersListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersListResponse>> UsersListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private DawsonSoft.Salesloft.Api.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = DawsonSoft.Salesloft.Api.Core.Client.Configuration.MergeConfigurations(
                DawsonSoft.Salesloft.Api.Core.Client.GlobalConfiguration.Instance,
                new DawsonSoft.Salesloft.Api.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DawsonSoft.Salesloft.Api.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DawsonSoft.Salesloft.Api.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DawsonSoft.Salesloft.Api.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(DawsonSoft.Salesloft.Api.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DawsonSoft.Salesloft.Api.Core.Client.Configuration.MergeConfigurations(
                DawsonSoft.Salesloft.Api.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DawsonSoft.Salesloft.Api.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DawsonSoft.Salesloft.Api.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DawsonSoft.Salesloft.Api.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(DawsonSoft.Salesloft.Api.Core.Client.ISynchronousClient client, DawsonSoft.Salesloft.Api.Core.Client.IAsynchronousClient asyncClient, DawsonSoft.Salesloft.Api.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DawsonSoft.Salesloft.Api.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DawsonSoft.Salesloft.Api.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DawsonSoft.Salesloft.Api.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DawsonSoft.Salesloft.Api.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DawsonSoft.Salesloft.Api.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetches an account, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountGetResponse</returns>
        public AccountGetResponse AccountGet(int? id, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountGetResponse> localVarResponse = AccountGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches an account, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountGetResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountGetResponse> AccountGetWithHttpInfo(int? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AccountGet");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountGetResponse>("/accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches an account, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountGetResponse</returns>
        public async System.Threading.Tasks.Task<AccountGetResponse> AccountGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountGetResponse> localVarResponse = await AccountGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches an account, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountGetResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountGetResponse>> AccountGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AccountGet");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.AccountGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountGetResponse>("/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsListResponse</returns>
        public AccountsListResponse AccountsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountsListResponse> localVarResponse = AccountsListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountsListResponse> AccountsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.AccountsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountsListResponse>("/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsListResponse</returns>
        public async System.Threading.Tasks.Task<AccountsListResponse> AccountsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountsListResponse> localVarResponse = await AccountsListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<AccountsListResponse>> AccountsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.AccountsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountsListResponse>("/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AccountsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivityHistoriesListResponse</returns>
        public ActivityHistoriesListResponse ActivityHistoriesList(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<ActivityHistoriesListResponse> localVarResponse = ActivityHistoriesListWithHttpInfo(ids, updatedAt, occurredAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivityHistoriesListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<ActivityHistoriesListResponse> ActivityHistoriesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (occurredAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "occurred_at", occurredAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.ActivityHistoriesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ActivityHistoriesListResponse>("/activity_histories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivityHistoriesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivityHistoriesListResponse</returns>
        public async System.Threading.Tasks.Task<ActivityHistoriesListResponse> ActivityHistoriesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<ActivityHistoriesListResponse> localVarResponse = await ActivityHistoriesListWithHttpInfoAsync(ids, updatedAt, occurredAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="occurredAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivityHistoriesListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<ActivityHistoriesListResponse>> ActivityHistoriesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? occurredAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (occurredAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "occurred_at", occurredAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.ActivityHistoriesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActivityHistoriesListResponse>("/activity_histories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivityHistoriesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a cadence as JSON. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadenceExportResponse</returns>
        public CadenceExportResponse CadenceExport(int? id, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceExportResponse> localVarResponse = CadenceExportWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a cadence as JSON. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadenceExportResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceExportResponse> CadenceExportWithHttpInfo(int? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CadenceExport");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.CadenceExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CadenceExportResponse>("/cadence_exports/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadenceExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a cadence as JSON. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadenceExportResponse</returns>
        public async System.Threading.Tasks.Task<CadenceExportResponse> CadenceExportAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceExportResponse> localVarResponse = await CadenceExportWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a cadence as JSON. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadenceExportResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceExportResponse>> CadenceExportWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CadenceExport");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.CadenceExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CadenceExportResponse>("/cadence_exports/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadenceExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a cadence 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadenceGetResponse</returns>
        public CadenceGetResponse CadenceGet(int? id, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceGetResponse> localVarResponse = CadenceGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a cadence 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadenceGetResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceGetResponse> CadenceGetWithHttpInfo(int? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CadenceGet");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.CadenceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CadenceGetResponse>("/cadences/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadenceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a cadence 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadenceGetResponse</returns>
        public async System.Threading.Tasks.Task<CadenceGetResponse> CadenceGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceGetResponse> localVarResponse = await CadenceGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a cadence 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Cadence ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadenceGetResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadenceGetResponse>> CadenceGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CadenceGet");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.CadenceGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CadenceGetResponse>("/cadences/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadenceGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CadencesListResponse</returns>
        public CadencesListResponse CadencesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadencesListResponse> localVarResponse = CadencesListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CadencesListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadencesListResponse> CadencesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.CadencesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CadencesListResponse>("/cadences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadencesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CadencesListResponse</returns>
        public async System.Threading.Tasks.Task<CadencesListResponse> CadencesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadencesListResponse> localVarResponse = await CadencesListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CadencesListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<CadencesListResponse>> CadencesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.CadencesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CadencesListResponse>("/cadences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CadencesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple group records.  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GroupsListResponse</returns>
        public GroupsListResponse GroupsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<GroupsListResponse> localVarResponse = GroupsListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple group records.  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GroupsListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<GroupsListResponse> GroupsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.GroupsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupsListResponse>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple group records.  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupsListResponse</returns>
        public async System.Threading.Tasks.Task<GroupsListResponse> GroupsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<GroupsListResponse> localVarResponse = await GroupsListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple group records.  
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupsListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<GroupsListResponse>> GroupsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.GroupsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupsListResponse>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple note records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotesListResponse</returns>
        public NotesListResponse NotesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<NotesListResponse> localVarResponse = NotesListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple note records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotesListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<NotesListResponse> NotesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.NotesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotesListResponse>("/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple note records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotesListResponse</returns>
        public async System.Threading.Tasks.Task<NotesListResponse> NotesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<NotesListResponse> localVarResponse = await NotesListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple note records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotesListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<NotesListResponse>> NotesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.NotesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotesListResponse>("/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a person 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeoplePutResponse</returns>
        public PeoplePutResponse PeopleUpdate(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePutResponse> localVarResponse = PeopleUpdateWithHttpInfo(id, personCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a person 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeoplePutResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePutResponse> PeopleUpdateWithHttpInfo(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PeopleUpdate");
            }

            // verify the required parameter 'personCreateRequest' is set
            if (personCreateRequest == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'personCreateRequest' when calling DefaultApi->PeopleUpdate");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = personCreateRequest;

            localVarRequestOptions.Operation = "DefaultApi.PeopleUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PeoplePutResponse>("/people/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a person 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeoplePutResponse</returns>
        public async System.Threading.Tasks.Task<PeoplePutResponse> PeopleUpdateAsync(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePutResponse> localVarResponse = await PeopleUpdateWithHttpInfoAsync(id, personCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a person 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeoplePutResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePutResponse>> PeopleUpdateWithHttpInfoAsync(int? id, PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PeopleUpdate");
            }

            // verify the required parameter 'personCreateRequest' is set
            if (personCreateRequest == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'personCreateRequest' when calling DefaultApi->PeopleUpdate");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = personCreateRequest;

            localVarRequestOptions.Operation = "DefaultApi.PeopleUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PeoplePutResponse>("/people/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PeopleUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeoplePostResponse</returns>
        public PeoplePostResponse PersonCreate(PersonCreateRequest personCreateRequest, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePostResponse> localVarResponse = PersonCreateWithHttpInfo(personCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeoplePostResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePostResponse> PersonCreateWithHttpInfo(PersonCreateRequest personCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'personCreateRequest' is set
            if (personCreateRequest == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'personCreateRequest' when calling DefaultApi->PersonCreate");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = personCreateRequest;

            localVarRequestOptions.Operation = "DefaultApi.PersonCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PeoplePostResponse>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeoplePostResponse</returns>
        public async System.Threading.Tasks.Task<PeoplePostResponse> PersonCreateAsync(PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePostResponse> localVarResponse = await PersonCreateWithHttpInfoAsync(personCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeoplePostResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeoplePostResponse>> PersonCreateWithHttpInfoAsync(PersonCreateRequest personCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'personCreateRequest' is set
            if (personCreateRequest == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'personCreateRequest' when calling DefaultApi->PersonCreate");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = personCreateRequest;

            localVarRequestOptions.Operation = "DefaultApi.PersonCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PeoplePostResponse>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a person, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleGetResponse</returns>
        public PeopleGetResponse PersonGet(int? id, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleGetResponse> localVarResponse = PersonGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a person, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleGetResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleGetResponse> PersonGetWithHttpInfo(int? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PersonGet");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PersonGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PeopleGetResponse>("/people/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a person, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleGetResponse</returns>
        public async System.Threading.Tasks.Task<PeopleGetResponse> PersonGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleGetResponse> localVarResponse = await PersonGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a person, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleGetResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleGetResponse>> PersonGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->PersonGet");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.PersonGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleGetResponse>("/people/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeopleListResponse</returns>
        public PeopleListResponse PersonList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleListResponse> localVarResponse = PersonListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeopleListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleListResponse> PersonListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.PersonList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PeopleListResponse>("/people", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeopleListResponse</returns>
        public async System.Threading.Tasks.Task<PeopleListResponse> PersonListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleListResponse> localVarResponse = await PersonListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeopleListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<PeopleListResponse>> PersonListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.PersonList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PeopleListResponse>("/people", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PersonList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of the tags used for a team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagsListResponse</returns>
        public TagsListResponse TagsList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TagsListResponse> localVarResponse = TagsListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of the tags used for a team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagsListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TagsListResponse> TagsListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.TagsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TagsListResponse>("/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of the tags used for a team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagsListResponse</returns>
        public async System.Threading.Tasks.Task<TagsListResponse> TagsListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TagsListResponse> localVarResponse = await TagsListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of the tags used for a team. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagsListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TagsListResponse>> TagsListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.TagsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagsListResponse>("/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TagsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a team template, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamTemplatesGetResponse</returns>
        public TeamTemplatesGetResponse TeamTemplatesGet(int? id, int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesGetResponse> localVarResponse = TeamTemplatesGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a team template, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamTemplatesGetResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesGetResponse> TeamTemplatesGetWithHttpInfo(int? id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->TeamTemplatesGet");
            }

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.TeamTemplatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamTemplatesGetResponse>("/team_templates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a team template, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamTemplatesGetResponse</returns>
        public async System.Threading.Tasks.Task<TeamTemplatesGetResponse> TeamTemplatesGetAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesGetResponse> localVarResponse = await TeamTemplatesGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a team template, by ID only. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamTemplatesGetResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesGetResponse>> TeamTemplatesGetWithHttpInfoAsync(int? id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new DawsonSoft.Salesloft.Api.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DefaultApi->TeamTemplatesGet");
            }


            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.TeamTemplatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamTemplatesGetResponse>("/team_templates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamTemplatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// etches multiple team template records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TeamTemplatesListResponse</returns>
        public TeamTemplatesListResponse TeamTemplatesList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesListResponse> localVarResponse = TeamTemplatesListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// etches multiple team template records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TeamTemplatesListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesListResponse> TeamTemplatesListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.TeamTemplatesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TeamTemplatesListResponse>("/team_templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamTemplatesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// etches multiple team template records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TeamTemplatesListResponse</returns>
        public async System.Threading.Tasks.Task<TeamTemplatesListResponse> TeamTemplatesListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesListResponse> localVarResponse = await TeamTemplatesListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// etches multiple team template records. 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TeamTemplatesListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<TeamTemplatesListResponse>> TeamTemplatesListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.TeamTemplatesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamTemplatesListResponse>("/team_templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamTemplatesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch current user 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserMeResponse</returns>
        public UserMeResponse UserMe(int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UserMeResponse> localVarResponse = UserMeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch current user 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserMeResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UserMeResponse> UserMeWithHttpInfo(int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.UserMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserMeResponse>("/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch current user 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserMeResponse</returns>
        public async System.Threading.Tasks.Task<UserMeResponse> UserMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UserMeResponse> localVarResponse = await UserMeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch current user 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserMeResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UserMeResponse>> UserMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.UserMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserMeResponse>("/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UsersListResponse</returns>
        public UsersListResponse UsersList(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UsersListResponse> localVarResponse = UsersListWithHttpInfo(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UsersListResponse</returns>
        public DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UsersListResponse> UsersListWithHttpInfo(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0)
        {
            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.UsersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UsersListResponse>("/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UsersListResponse</returns>
        public async System.Threading.Tasks.Task<UsersListResponse> UsersListAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UsersListResponse> localVarResponse = await UsersListWithHttpInfoAsync(ids, updatedAt, createdAt, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
        /// </summary>
        /// <exception cref="DawsonSoft.Salesloft.Api.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"> (optional)</param>
        /// <param name="updatedAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="createdAt">Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision. (optional)</param>
        /// <param name="sortBy">Key to sort on (optional)</param>
        /// <param name="sortDirection">Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)</param>
        /// <param name="perPage">How many records to show per page in the range [1, 100]. Defaults to 25 (optional)</param>
        /// <param name="page">The current page to fetch results from. Defaults to 1 (optional)</param>
        /// <param name="includePagingCounts">Whether to include total_pages and total_count in the metadata. Defaults to false (optional)</param>
        /// <param name="limitPagingCounts">Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UsersListResponse)</returns>
        public async System.Threading.Tasks.Task<DawsonSoft.Salesloft.Api.Core.Client.ApiResponse<UsersListResponse>> UsersListWithHttpInfoAsync(int? ids = default(int?), string? updatedAt = default(string?), string? createdAt = default(string?), string? sortBy = default(string?), string? sortDirection = default(string?), string? perPage = default(string?), string? page = default(string?), string? includePagingCounts = default(string?), string? limitPagingCounts = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DawsonSoft.Salesloft.Api.Core.Client.RequestOptions localVarRequestOptions = new DawsonSoft.Salesloft.Api.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            }
            if (updatedAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "updated_at", updatedAt));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "sort_direction", sortDirection));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (includePagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "include_paging_counts", includePagingCounts));
            }
            if (limitPagingCounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(DawsonSoft.Salesloft.Api.Core.Client.ClientUtils.ParameterToMultiMap("", "limit_paging_counts", limitPagingCounts));
            }

            localVarRequestOptions.Operation = "DefaultApi.UsersList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UsersListResponse>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UsersList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

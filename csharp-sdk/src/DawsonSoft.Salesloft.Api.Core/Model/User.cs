/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// User
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="guid">guid.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="name">name.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="jobRole">jobRole.</param>
        /// <param name="active">active.</param>
        /// <param name="varTimeZone">varTimeZone.</param>
        /// <param name="localeUtcOffset">localeUtcOffset.</param>
        /// <param name="slackUsername">slackUsername.</param>
        /// <param name="email">email.</param>
        /// <param name="emailClientEmailAddress">emailClientEmailAddress.</param>
        /// <param name="sendingEmailAddress">sendingEmailAddress.</param>
        /// <param name="fullEmailAddress">fullEmailAddress.</param>
        /// <param name="seatPackage">seatPackage.</param>
        /// <param name="emailSignature">emailSignature.</param>
        /// <param name="emailSignatureType">emailSignatureType.</param>
        /// <param name="emailSignatureClickTrackingDisabled">emailSignatureClickTrackingDisabled.</param>
        /// <param name="teamAdmin">teamAdmin.</param>
        /// <param name="localDialEnabled">localDialEnabled.</param>
        /// <param name="clickToCallEnabled">clickToCallEnabled.</param>
        /// <param name="emailClientConfigured">emailClientConfigured.</param>
        /// <param name="crmConnected">crmConnected.</param>
        /// <param name="externalFeatureFlags">externalFeatureFlags.</param>
        /// <param name="phoneClient">phoneClient.</param>
        /// <param name="phoneNumberAssignment">phoneNumberAssignment.</param>
        /// <param name="group">group.</param>
        /// <param name="team">team.</param>
        /// <param name="role">role.</param>
        public User(int? id = default(int?), string guid = default(string), string createdAt = default(string), string updatedAt = default(string), string name = default(string), string firstName = default(string), string lastName = default(string), string jobRole = default(string), bool? active = default(bool?), string varTimeZone = default(string), int? localeUtcOffset = default(int?), string slackUsername = default(string), string email = default(string), string emailClientEmailAddress = default(string), string sendingEmailAddress = default(string), string fullEmailAddress = default(string), string seatPackage = default(string), string emailSignature = default(string), string emailSignatureType = default(string), bool? emailSignatureClickTrackingDisabled = default(bool?), bool? teamAdmin = default(bool?), bool? localDialEnabled = default(bool?), bool? clickToCallEnabled = default(bool?), bool? emailClientConfigured = default(bool?), bool? crmConnected = default(bool?), ExternalProperties externalFeatureFlags = default(ExternalProperties), PhoneClient phoneClient = default(PhoneClient), EntityRefrence phoneNumberAssignment = default(EntityRefrence), EntityRefrence group = default(EntityRefrence), EntityRefrence team = default(EntityRefrence), EntityRef2 role = default(EntityRef2))
        {
            this.Id = id;
            this.Guid = guid;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Name = name;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.JobRole = jobRole;
            this.Active = active;
            this.VarTimeZone = varTimeZone;
            this.LocaleUtcOffset = localeUtcOffset;
            this.SlackUsername = slackUsername;
            this.Email = email;
            this.EmailClientEmailAddress = emailClientEmailAddress;
            this.SendingEmailAddress = sendingEmailAddress;
            this.FullEmailAddress = fullEmailAddress;
            this.SeatPackage = seatPackage;
            this.EmailSignature = emailSignature;
            this.EmailSignatureType = emailSignatureType;
            this.EmailSignatureClickTrackingDisabled = emailSignatureClickTrackingDisabled;
            this.TeamAdmin = teamAdmin;
            this.LocalDialEnabled = localDialEnabled;
            this.ClickToCallEnabled = clickToCallEnabled;
            this.EmailClientConfigured = emailClientConfigured;
            this.CrmConnected = crmConnected;
            this.ExternalFeatureFlags = externalFeatureFlags;
            this.PhoneClient = phoneClient;
            this.PhoneNumberAssignment = phoneNumberAssignment;
            this.Group = group;
            this.Team = team;
            this.Role = role;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Guid
        /// </summary>
        [DataMember(Name = "guid", EmitDefaultValue = true)]
        public string Guid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets JobRole
        /// </summary>
        [DataMember(Name = "job_role", EmitDefaultValue = true)]
        public string JobRole { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets VarTimeZone
        /// </summary>
        [DataMember(Name = "time_zone", EmitDefaultValue = true)]
        public string VarTimeZone { get; set; }

        /// <summary>
        /// Gets or Sets LocaleUtcOffset
        /// </summary>
        [DataMember(Name = "locale_utc_offset", EmitDefaultValue = true)]
        public int? LocaleUtcOffset { get; set; }

        /// <summary>
        /// Gets or Sets SlackUsername
        /// </summary>
        [DataMember(Name = "slack_username", EmitDefaultValue = true)]
        public string SlackUsername { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailClientEmailAddress
        /// </summary>
        [DataMember(Name = "email_client_email_address", EmitDefaultValue = true)]
        public string EmailClientEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SendingEmailAddress
        /// </summary>
        [DataMember(Name = "sending_email_address", EmitDefaultValue = true)]
        public string SendingEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FullEmailAddress
        /// </summary>
        [DataMember(Name = "full_email_address", EmitDefaultValue = true)]
        public string FullEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SeatPackage
        /// </summary>
        [DataMember(Name = "seat_package", EmitDefaultValue = true)]
        public string SeatPackage { get; set; }

        /// <summary>
        /// Gets or Sets EmailSignature
        /// </summary>
        [DataMember(Name = "email_signature", EmitDefaultValue = true)]
        public string EmailSignature { get; set; }

        /// <summary>
        /// Gets or Sets EmailSignatureType
        /// </summary>
        [DataMember(Name = "email_signature_type", EmitDefaultValue = true)]
        public string EmailSignatureType { get; set; }

        /// <summary>
        /// Gets or Sets EmailSignatureClickTrackingDisabled
        /// </summary>
        [DataMember(Name = "email_signature_click_tracking_disabled", EmitDefaultValue = true)]
        public bool? EmailSignatureClickTrackingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets TeamAdmin
        /// </summary>
        [DataMember(Name = "team_admin", EmitDefaultValue = true)]
        public bool? TeamAdmin { get; set; }

        /// <summary>
        /// Gets or Sets LocalDialEnabled
        /// </summary>
        [DataMember(Name = "local_dial_enabled", EmitDefaultValue = true)]
        public bool? LocalDialEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ClickToCallEnabled
        /// </summary>
        [DataMember(Name = "click_to_call_enabled", EmitDefaultValue = true)]
        public bool? ClickToCallEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EmailClientConfigured
        /// </summary>
        [DataMember(Name = "email_client_configured", EmitDefaultValue = true)]
        public bool? EmailClientConfigured { get; set; }

        /// <summary>
        /// Gets or Sets CrmConnected
        /// </summary>
        [DataMember(Name = "crm_connected", EmitDefaultValue = true)]
        public bool? CrmConnected { get; set; }

        /// <summary>
        /// Gets or Sets ExternalFeatureFlags
        /// </summary>
        [DataMember(Name = "external_feature_flags", EmitDefaultValue = true)]
        public ExternalProperties ExternalFeatureFlags { get; set; }

        /// <summary>
        /// Gets or Sets PhoneClient
        /// </summary>
        [DataMember(Name = "phone_client", EmitDefaultValue = true)]
        public PhoneClient PhoneClient { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumberAssignment
        /// </summary>
        [DataMember(Name = "phone_number_assignment", EmitDefaultValue = true)]
        public EntityRefrence PhoneNumberAssignment { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public EntityRefrence Group { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = true)]
        public EntityRefrence Team { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = true)]
        public EntityRef2 Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JobRole: ").Append(JobRole).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("  LocaleUtcOffset: ").Append(LocaleUtcOffset).Append("\n");
            sb.Append("  SlackUsername: ").Append(SlackUsername).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailClientEmailAddress: ").Append(EmailClientEmailAddress).Append("\n");
            sb.Append("  SendingEmailAddress: ").Append(SendingEmailAddress).Append("\n");
            sb.Append("  FullEmailAddress: ").Append(FullEmailAddress).Append("\n");
            sb.Append("  SeatPackage: ").Append(SeatPackage).Append("\n");
            sb.Append("  EmailSignature: ").Append(EmailSignature).Append("\n");
            sb.Append("  EmailSignatureType: ").Append(EmailSignatureType).Append("\n");
            sb.Append("  EmailSignatureClickTrackingDisabled: ").Append(EmailSignatureClickTrackingDisabled).Append("\n");
            sb.Append("  TeamAdmin: ").Append(TeamAdmin).Append("\n");
            sb.Append("  LocalDialEnabled: ").Append(LocalDialEnabled).Append("\n");
            sb.Append("  ClickToCallEnabled: ").Append(ClickToCallEnabled).Append("\n");
            sb.Append("  EmailClientConfigured: ").Append(EmailClientConfigured).Append("\n");
            sb.Append("  CrmConnected: ").Append(CrmConnected).Append("\n");
            sb.Append("  ExternalFeatureFlags: ").Append(ExternalFeatureFlags).Append("\n");
            sb.Append("  PhoneClient: ").Append(PhoneClient).Append("\n");
            sb.Append("  PhoneNumberAssignment: ").Append(PhoneNumberAssignment).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// PeopleCustomProperties
    /// </summary>
    [DataContract(Name = "PeopleCustomProperties")]
    public partial class PeopleCustomProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleCustomProperties" /> class.
        /// </summary>
        /// <param name="contactId">contactId.</param>
        /// <param name="remoteId">remoteId.</param>
        /// <param name="allEmailAddresses">allEmailAddresses.</param>
        /// <param name="allPhoneNumbers">allPhoneNumbers.</param>
        /// <param name="advanceID">advanceID.</param>
        public PeopleCustomProperties(string contactId = default(string), string remoteId = default(string), string allEmailAddresses = default(string), string allPhoneNumbers = default(string), string advanceID = default(string))
        {
            this.ContactId = contactId;
            this.RemoteId = remoteId;
            this.AllEmailAddresses = allEmailAddresses;
            this.AllPhoneNumbers = allPhoneNumbers;
            this.AdvanceID = advanceID;
        }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contact_id", EmitDefaultValue = true)]
        public string ContactId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteId
        /// </summary>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// Gets or Sets AllEmailAddresses
        /// </summary>
        [DataMember(Name = "All Email Addresses", EmitDefaultValue = true)]
        public string AllEmailAddresses { get; set; }

        /// <summary>
        /// Gets or Sets AllPhoneNumbers
        /// </summary>
        [DataMember(Name = "All Phone Numbers", EmitDefaultValue = true)]
        public string AllPhoneNumbers { get; set; }

        /// <summary>
        /// Gets or Sets AdvanceID
        /// </summary>
        [DataMember(Name = "AdvanceID", EmitDefaultValue = true)]
        public string AdvanceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeopleCustomProperties {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  AllEmailAddresses: ").Append(AllEmailAddresses).Append("\n");
            sb.Append("  AllPhoneNumbers: ").Append(AllPhoneNumbers).Append("\n");
            sb.Append("  AdvanceID: ").Append(AdvanceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

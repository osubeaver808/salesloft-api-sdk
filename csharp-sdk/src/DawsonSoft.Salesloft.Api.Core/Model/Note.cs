/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// Note
    /// </summary>
    [DataContract(Name = "Note")]
    public partial class Note : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Note" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="content">content.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="associatedType">associatedType.</param>
        /// <param name="user">user.</param>
        /// <param name="associatedWith">associatedWith.</param>
        /// <param name="call">call.</param>
        public Note(int? id = default(int?), string content = default(string), string createdAt = default(string), string updatedAt = default(string), string associatedType = default(string), EntityRefrence user = default(EntityRefrence), EntityRefrence associatedWith = default(EntityRefrence), EntityRefrence call = default(EntityRefrence))
        {
            this.Id = id;
            this.Content = content;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.AssociatedType = associatedType;
            this.User = user;
            this.AssociatedWith = associatedWith;
            this.Call = call;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedType
        /// </summary>
        [DataMember(Name = "associated_type", EmitDefaultValue = true)]
        public string AssociatedType { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public EntityRefrence User { get; set; }

        /// <summary>
        /// Gets or Sets AssociatedWith
        /// </summary>
        [DataMember(Name = "associated_with", EmitDefaultValue = true)]
        public EntityRefrence AssociatedWith { get; set; }

        /// <summary>
        /// Gets or Sets Call
        /// </summary>
        [DataMember(Name = "call", EmitDefaultValue = true)]
        public EntityRefrence Call { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Note {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  AssociatedType: ").Append(AssociatedType).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  AssociatedWith: ").Append(AssociatedWith).Append("\n");
            sb.Append("  Call: ").Append(Call).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

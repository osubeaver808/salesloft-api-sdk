/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// TeamTemplateSub
    /// </summary>
    [DataContract(Name = "TeamTemplateSub")]
    public partial class TeamTemplateSub : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamTemplateSub" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="subject">subject.</param>
        /// <param name="body">body.</param>
        /// <param name="bodyPreview">bodyPreview.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="lastModifiedAt">lastModifiedAt.</param>
        /// <param name="openTrackingEnabled">openTrackingEnabled.</param>
        /// <param name="clickTrackingEnabled">clickTrackingEnabled.</param>
        /// <param name="links">links.</param>
        /// <param name="tags">tags.</param>
        /// <param name="counts">counts.</param>
        /// <param name="lastModifiedUser">lastModifiedUser.</param>
        public TeamTemplateSub(string id = default(string), string title = default(string), string subject = default(string), string body = default(string), string bodyPreview = default(string), string createdAt = default(string), string updatedAt = default(string), string lastModifiedAt = default(string), bool? openTrackingEnabled = default(bool?), bool? clickTrackingEnabled = default(bool?), Attachments links = default(Attachments), List<string> tags = default(List<string>), TeamTemplateStats counts = default(TeamTemplateStats), EntityRefrence lastModifiedUser = default(EntityRefrence))
        {
            this.Id = id;
            this.Title = title;
            this.Subject = subject;
            this.Body = body;
            this.BodyPreview = bodyPreview;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.LastModifiedAt = lastModifiedAt;
            this.OpenTrackingEnabled = openTrackingEnabled;
            this.ClickTrackingEnabled = clickTrackingEnabled;
            this.Links = links;
            this.Tags = tags;
            this.Counts = counts;
            this.LastModifiedUser = lastModifiedUser;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets BodyPreview
        /// </summary>
        [DataMember(Name = "body_preview", EmitDefaultValue = true)]
        public string BodyPreview { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedAt
        /// </summary>
        [DataMember(Name = "last_modified_at", EmitDefaultValue = true)]
        public string LastModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets OpenTrackingEnabled
        /// </summary>
        [DataMember(Name = "open_tracking_enabled", EmitDefaultValue = true)]
        public bool? OpenTrackingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ClickTrackingEnabled
        /// </summary>
        [DataMember(Name = "click_tracking_enabled", EmitDefaultValue = true)]
        public bool? ClickTrackingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = true)]
        public Attachments Links { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Counts
        /// </summary>
        [DataMember(Name = "counts", EmitDefaultValue = true)]
        public TeamTemplateStats Counts { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUser
        /// </summary>
        [DataMember(Name = "last_modified_user", EmitDefaultValue = true)]
        public EntityRefrence LastModifiedUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TeamTemplateSub {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BodyPreview: ").Append(BodyPreview).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LastModifiedAt: ").Append(LastModifiedAt).Append("\n");
            sb.Append("  OpenTrackingEnabled: ").Append(OpenTrackingEnabled).Append("\n");
            sb.Append("  ClickTrackingEnabled: ").Append(ClickTrackingEnabled).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  LastModifiedUser: ").Append(LastModifiedUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

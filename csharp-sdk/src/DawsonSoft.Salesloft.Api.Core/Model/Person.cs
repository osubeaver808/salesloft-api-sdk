/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// Person
    /// </summary>
    [DataContract(Name = "Person")]
    public partial class Person : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Person" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="lastContactedAt">lastContactedAt.</param>
        /// <param name="lastRepliedAt">lastRepliedAt.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="fullEmailAddress">fullEmailAddress.</param>
        /// <param name="phone">phone.</param>
        /// <param name="homePhone">homePhone.</param>
        /// <param name="mobilePhone">mobilePhone.</param>
        /// <param name="city">city.</param>
        /// <param name="state">state.</param>
        /// <param name="personCompanyWebsite">personCompanyWebsite.</param>
        /// <param name="doNotContact">doNotContact.</param>
        /// <param name="bouncing">bouncing.</param>
        /// <param name="locale">locale.</param>
        /// <param name="localeUtcOffset">localeUtcOffset.</param>
        /// <param name="euResident">euResident.</param>
        /// <param name="personalWebsite">personalWebsite.</param>
        /// <param name="lastContactedType">lastContactedType.</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="tags">tags.</param>
        /// <param name="successCount">successCount.</param>
        /// <param name="starred">starred.</param>
        /// <param name="untouched">untouched.</param>
        /// <param name="hotLead">hotLead.</param>
        /// <param name="counts">counts.</param>
        /// <param name="owner">owner.</param>
        /// <param name="lastContactedBy">lastContactedBy.</param>
        /// <param name="import">import.</param>
        /// <param name="personStage">personStage.</param>
        /// <param name="mostRecentCadence">mostRecentCadence.</param>
        /// <param name="lastCompletedStepCadence">lastCompletedStepCadence.</param>
        /// <param name="lastCompletedStep">lastCompletedStep.</param>
        public Person(int? id = default(int?), string createdAt = default(string), string updatedAt = default(string), string lastContactedAt = default(string), string lastRepliedAt = default(string), string firstName = default(string), string lastName = default(string), string displayName = default(string), string emailAddress = default(string), string fullEmailAddress = default(string), string phone = default(string), string homePhone = default(string), string mobilePhone = default(string), string city = default(string), string state = default(string), string personCompanyWebsite = default(string), bool? doNotContact = default(bool?), bool? bouncing = default(bool?), string locale = default(string), int? localeUtcOffset = default(int?), bool? euResident = default(bool?), string personalWebsite = default(string), string lastContactedType = default(string), PeopleCustomProperties customFields = default(PeopleCustomProperties), List<string> tags = default(List<string>), int? successCount = default(int?), bool? starred = default(bool?), bool? untouched = default(bool?), bool? hotLead = default(bool?), PersonActivityStats counts = default(PersonActivityStats), EntityRefrence owner = default(EntityRefrence), EntityRefrence lastContactedBy = default(EntityRefrence), EntityRefrence import = default(EntityRefrence), EntityRefrence personStage = default(EntityRefrence), EntityRefrence mostRecentCadence = default(EntityRefrence), EntityRefrence lastCompletedStepCadence = default(EntityRefrence), EntityRefrence lastCompletedStep = default(EntityRefrence))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.LastContactedAt = lastContactedAt;
            this.LastRepliedAt = lastRepliedAt;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.DisplayName = displayName;
            this.EmailAddress = emailAddress;
            this.FullEmailAddress = fullEmailAddress;
            this.Phone = phone;
            this.HomePhone = homePhone;
            this.MobilePhone = mobilePhone;
            this.City = city;
            this.State = state;
            this.PersonCompanyWebsite = personCompanyWebsite;
            this.DoNotContact = doNotContact;
            this.Bouncing = bouncing;
            this.Locale = locale;
            this.LocaleUtcOffset = localeUtcOffset;
            this.EuResident = euResident;
            this.PersonalWebsite = personalWebsite;
            this.LastContactedType = lastContactedType;
            this.CustomFields = customFields;
            this.Tags = tags;
            this.SuccessCount = successCount;
            this.Starred = starred;
            this.Untouched = untouched;
            this.HotLead = hotLead;
            this.Counts = counts;
            this.Owner = owner;
            this.LastContactedBy = lastContactedBy;
            this.Import = import;
            this.PersonStage = personStage;
            this.MostRecentCadence = mostRecentCadence;
            this.LastCompletedStepCadence = lastCompletedStepCadence;
            this.LastCompletedStep = lastCompletedStep;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastContactedAt
        /// </summary>
        [DataMember(Name = "last_contacted_at", EmitDefaultValue = true)]
        public string LastContactedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastRepliedAt
        /// </summary>
        [DataMember(Name = "last_replied_at", EmitDefaultValue = true)]
        public string LastRepliedAt { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "email_address", EmitDefaultValue = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets FullEmailAddress
        /// </summary>
        [DataMember(Name = "full_email_address", EmitDefaultValue = true)]
        public string FullEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets HomePhone
        /// </summary>
        [DataMember(Name = "home_phone", EmitDefaultValue = true)]
        public string HomePhone { get; set; }

        /// <summary>
        /// Gets or Sets MobilePhone
        /// </summary>
        [DataMember(Name = "mobile_phone", EmitDefaultValue = true)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets PersonCompanyWebsite
        /// </summary>
        [DataMember(Name = "person_company_website", EmitDefaultValue = true)]
        public string PersonCompanyWebsite { get; set; }

        /// <summary>
        /// Gets or Sets DoNotContact
        /// </summary>
        [DataMember(Name = "do_not_contact", EmitDefaultValue = true)]
        public bool? DoNotContact { get; set; }

        /// <summary>
        /// Gets or Sets Bouncing
        /// </summary>
        [DataMember(Name = "bouncing", EmitDefaultValue = true)]
        public bool? Bouncing { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name = "locale", EmitDefaultValue = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocaleUtcOffset
        /// </summary>
        [DataMember(Name = "locale_utc_offset", EmitDefaultValue = true)]
        public int? LocaleUtcOffset { get; set; }

        /// <summary>
        /// Gets or Sets EuResident
        /// </summary>
        [DataMember(Name = "eu_resident", EmitDefaultValue = true)]
        public bool? EuResident { get; set; }

        /// <summary>
        /// Gets or Sets PersonalWebsite
        /// </summary>
        [DataMember(Name = "personal_website", EmitDefaultValue = true)]
        public string PersonalWebsite { get; set; }

        /// <summary>
        /// Gets or Sets LastContactedType
        /// </summary>
        [DataMember(Name = "last_contacted_type", EmitDefaultValue = true)]
        public string LastContactedType { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public PeopleCustomProperties CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets SuccessCount
        /// </summary>
        [DataMember(Name = "success_count", EmitDefaultValue = true)]
        public int? SuccessCount { get; set; }

        /// <summary>
        /// Gets or Sets Starred
        /// </summary>
        [DataMember(Name = "starred", EmitDefaultValue = true)]
        public bool? Starred { get; set; }

        /// <summary>
        /// Gets or Sets Untouched
        /// </summary>
        [DataMember(Name = "untouched", EmitDefaultValue = true)]
        public bool? Untouched { get; set; }

        /// <summary>
        /// Gets or Sets HotLead
        /// </summary>
        [DataMember(Name = "hot_lead", EmitDefaultValue = true)]
        public bool? HotLead { get; set; }

        /// <summary>
        /// Gets or Sets Counts
        /// </summary>
        [DataMember(Name = "counts", EmitDefaultValue = true)]
        public PersonActivityStats Counts { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public EntityRefrence Owner { get; set; }

        /// <summary>
        /// Gets or Sets LastContactedBy
        /// </summary>
        [DataMember(Name = "last_contacted_by", EmitDefaultValue = true)]
        public EntityRefrence LastContactedBy { get; set; }

        /// <summary>
        /// Gets or Sets Import
        /// </summary>
        [DataMember(Name = "import", EmitDefaultValue = true)]
        public EntityRefrence Import { get; set; }

        /// <summary>
        /// Gets or Sets PersonStage
        /// </summary>
        [DataMember(Name = "person_stage", EmitDefaultValue = true)]
        public EntityRefrence PersonStage { get; set; }

        /// <summary>
        /// Gets or Sets MostRecentCadence
        /// </summary>
        [DataMember(Name = "most_recent_cadence", EmitDefaultValue = true)]
        public EntityRefrence MostRecentCadence { get; set; }

        /// <summary>
        /// Gets or Sets LastCompletedStepCadence
        /// </summary>
        [DataMember(Name = "last_completed_step_cadence", EmitDefaultValue = true)]
        public EntityRefrence LastCompletedStepCadence { get; set; }

        /// <summary>
        /// Gets or Sets LastCompletedStep
        /// </summary>
        [DataMember(Name = "last_completed_step", EmitDefaultValue = true)]
        public EntityRefrence LastCompletedStep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LastContactedAt: ").Append(LastContactedAt).Append("\n");
            sb.Append("  LastRepliedAt: ").Append(LastRepliedAt).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FullEmailAddress: ").Append(FullEmailAddress).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PersonCompanyWebsite: ").Append(PersonCompanyWebsite).Append("\n");
            sb.Append("  DoNotContact: ").Append(DoNotContact).Append("\n");
            sb.Append("  Bouncing: ").Append(Bouncing).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocaleUtcOffset: ").Append(LocaleUtcOffset).Append("\n");
            sb.Append("  EuResident: ").Append(EuResident).Append("\n");
            sb.Append("  PersonalWebsite: ").Append(PersonalWebsite).Append("\n");
            sb.Append("  LastContactedType: ").Append(LastContactedType).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  Starred: ").Append(Starred).Append("\n");
            sb.Append("  Untouched: ").Append(Untouched).Append("\n");
            sb.Append("  HotLead: ").Append(HotLead).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  LastContactedBy: ").Append(LastContactedBy).Append("\n");
            sb.Append("  Import: ").Append(Import).Append("\n");
            sb.Append("  PersonStage: ").Append(PersonStage).Append("\n");
            sb.Append("  MostRecentCadence: ").Append(MostRecentCadence).Append("\n");
            sb.Append("  LastCompletedStepCadence: ").Append(LastCompletedStepCadence).Append("\n");
            sb.Append("  LastCompletedStep: ").Append(LastCompletedStep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

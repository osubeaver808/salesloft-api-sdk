/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// Cadence
    /// </summary>
    [DataContract(Name = "Cadence")]
    public partial class Cadence : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cadence" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="latestActiveDate">latestActiveDate.</param>
        /// <param name="teamCadence">teamCadence.</param>
        /// <param name="shared">shared.</param>
        /// <param name="archived">archived.</param>
        /// <param name="removeBouncesEnabled">removeBouncesEnabled.</param>
        /// <param name="removeRepliesEnabled">removeRepliesEnabled.</param>
        /// <param name="optOutLinkIncluded">optOutLinkIncluded.</param>
        /// <param name="draft">draft.</param>
        /// <param name="cadenceFunction">cadenceFunction.</param>
        /// <param name="name">name.</param>
        /// <param name="externalIdentifier">externalIdentifier.</param>
        /// <param name="currentState">currentState.</param>
        /// <param name="creator">creator.</param>
        /// <param name="owner">owner.</param>
        /// <param name="bouncedStage">bouncedStage.</param>
        /// <param name="counts">counts.</param>
        public Cadence(int? id = default(int?), string createdAt = default(string), string updatedAt = default(string), string latestActiveDate = default(string), bool? teamCadence = default(bool?), bool? shared = default(bool?), bool? archived = default(bool?), bool? removeBouncesEnabled = default(bool?), bool? removeRepliesEnabled = default(bool?), bool? optOutLinkIncluded = default(bool?), bool? draft = default(bool?), string cadenceFunction = default(string), string name = default(string), string externalIdentifier = default(string), string currentState = default(string), EntityRefrence creator = default(EntityRefrence), EntityRefrence owner = default(EntityRefrence), EntityRefrence bouncedStage = default(EntityRefrence), CadenceStats counts = default(CadenceStats))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.LatestActiveDate = latestActiveDate;
            this.TeamCadence = teamCadence;
            this.Shared = shared;
            this.Archived = archived;
            this.RemoveBouncesEnabled = removeBouncesEnabled;
            this.RemoveRepliesEnabled = removeRepliesEnabled;
            this.OptOutLinkIncluded = optOutLinkIncluded;
            this.Draft = draft;
            this.CadenceFunction = cadenceFunction;
            this.Name = name;
            this.ExternalIdentifier = externalIdentifier;
            this.CurrentState = currentState;
            this.Creator = creator;
            this.Owner = owner;
            this.BouncedStage = bouncedStage;
            this.Counts = counts;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets LatestActiveDate
        /// </summary>
        [DataMember(Name = "latest_active_date", EmitDefaultValue = true)]
        public string LatestActiveDate { get; set; }

        /// <summary>
        /// Gets or Sets TeamCadence
        /// </summary>
        [DataMember(Name = "team_cadence", EmitDefaultValue = true)]
        public bool? TeamCadence { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool? Shared { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool? Archived { get; set; }

        /// <summary>
        /// Gets or Sets RemoveBouncesEnabled
        /// </summary>
        [DataMember(Name = "remove_bounces_enabled", EmitDefaultValue = true)]
        public bool? RemoveBouncesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets RemoveRepliesEnabled
        /// </summary>
        [DataMember(Name = "remove_replies_enabled", EmitDefaultValue = true)]
        public bool? RemoveRepliesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets OptOutLinkIncluded
        /// </summary>
        [DataMember(Name = "opt_out_link_included", EmitDefaultValue = true)]
        public bool? OptOutLinkIncluded { get; set; }

        /// <summary>
        /// Gets or Sets Draft
        /// </summary>
        [DataMember(Name = "draft", EmitDefaultValue = true)]
        public bool? Draft { get; set; }

        /// <summary>
        /// Gets or Sets CadenceFunction
        /// </summary>
        [DataMember(Name = "cadence_function", EmitDefaultValue = true)]
        public string CadenceFunction { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ExternalIdentifier
        /// </summary>
        [DataMember(Name = "external_identifier", EmitDefaultValue = true)]
        public string ExternalIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name = "current_state", EmitDefaultValue = true)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name = "creator", EmitDefaultValue = true)]
        public EntityRefrence Creator { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public EntityRefrence Owner { get; set; }

        /// <summary>
        /// Gets or Sets BouncedStage
        /// </summary>
        [DataMember(Name = "bounced_stage", EmitDefaultValue = true)]
        public EntityRefrence BouncedStage { get; set; }

        /// <summary>
        /// Gets or Sets Counts
        /// </summary>
        [DataMember(Name = "counts", EmitDefaultValue = true)]
        public CadenceStats Counts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Cadence {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  LatestActiveDate: ").Append(LatestActiveDate).Append("\n");
            sb.Append("  TeamCadence: ").Append(TeamCadence).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  RemoveBouncesEnabled: ").Append(RemoveBouncesEnabled).Append("\n");
            sb.Append("  RemoveRepliesEnabled: ").Append(RemoveRepliesEnabled).Append("\n");
            sb.Append("  OptOutLinkIncluded: ").Append(OptOutLinkIncluded).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  CadenceFunction: ").Append(CadenceFunction).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExternalIdentifier: ").Append(ExternalIdentifier).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  BouncedStage: ").Append(BouncedStage).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

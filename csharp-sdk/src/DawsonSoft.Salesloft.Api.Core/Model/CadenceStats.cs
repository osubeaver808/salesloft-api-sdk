/*
 * Salesloft
 *
 * Salesloft
 *
 * The version of the OpenAPI document: 1.0.alpha
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DawsonSoft.Salesloft.Api.Core.Client.OpenAPIDateConverter;

namespace DawsonSoft.Salesloft.Api.Core.Model
{
    /// <summary>
    /// CadenceStats
    /// </summary>
    [DataContract(Name = "CadenceStats")]
    public partial class CadenceStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CadenceStats" /> class.
        /// </summary>
        /// <param name="cadencePeople">cadencePeople.</param>
        /// <param name="peopleActedOnCount">peopleActedOnCount.</param>
        /// <param name="targetDailyPeople">targetDailyPeople.</param>
        /// <param name="opportunitiesCreated">opportunitiesCreated.</param>
        /// <param name="meetingsBooked">meetingsBooked.</param>
        public CadenceStats(int? cadencePeople = default(int?), int? peopleActedOnCount = default(int?), int? targetDailyPeople = default(int?), int? opportunitiesCreated = default(int?), int? meetingsBooked = default(int?))
        {
            this.CadencePeople = cadencePeople;
            this.PeopleActedOnCount = peopleActedOnCount;
            this.TargetDailyPeople = targetDailyPeople;
            this.OpportunitiesCreated = opportunitiesCreated;
            this.MeetingsBooked = meetingsBooked;
        }

        /// <summary>
        /// Gets or Sets CadencePeople
        /// </summary>
        [DataMember(Name = "cadence_people", EmitDefaultValue = true)]
        public int? CadencePeople { get; set; }

        /// <summary>
        /// Gets or Sets PeopleActedOnCount
        /// </summary>
        [DataMember(Name = "people_acted_on_count", EmitDefaultValue = true)]
        public int? PeopleActedOnCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetDailyPeople
        /// </summary>
        [DataMember(Name = "target_daily_people", EmitDefaultValue = true)]
        public int? TargetDailyPeople { get; set; }

        /// <summary>
        /// Gets or Sets OpportunitiesCreated
        /// </summary>
        [DataMember(Name = "opportunities_created", EmitDefaultValue = true)]
        public int? OpportunitiesCreated { get; set; }

        /// <summary>
        /// Gets or Sets MeetingsBooked
        /// </summary>
        [DataMember(Name = "meetings_booked", EmitDefaultValue = true)]
        public int? MeetingsBooked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CadenceStats {\n");
            sb.Append("  CadencePeople: ").Append(CadencePeople).Append("\n");
            sb.Append("  PeopleActedOnCount: ").Append(PeopleActedOnCount).Append("\n");
            sb.Append("  TargetDailyPeople: ").Append(TargetDailyPeople).Append("\n");
            sb.Append("  OpportunitiesCreated: ").Append(OpportunitiesCreated).Append("\n");
            sb.Append("  MeetingsBooked: ").Append(MeetingsBooked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
